#include <bits/stdc++.h>
int knapsackUtil(int ind, int W,vector<int>& wt, vector<int>& val,vector<vector<int>>& dp){
    if(ind == 0){
        if(wt[0] <=W) return val[0];
        return 0;
    }
    if(dp[ind][W]!=-1)
        return dp[ind][W];
    int notTaken = 0 + knapsackUtil(ind-1,W,wt,val,dp);
    int taken = INT_MIN;
    if(wt[ind] <= W)
        taken = val[ind] + knapsackUtil(ind-1,W-wt[ind],wt,val,dp);
     return dp[ind][W]=max(notTaken,taken);
}

int knapsack(vector<int>& weight, vector<int>& value, int n, int maxWeight){
    vector<vector<int>> dp(n,vector<int>(maxWeight+1,-1));
    return knapsackUtil(n-1,maxWeight,weight,value,dp);
}
